services:
  keycloak_db:
    image: postgres:17.5-alpine3.21
    container_name: keycloak_postgres_db
    env_file: .env
    environment:
      POSTGRES_DB: ${KC_DB_NAME}
      POSTGRES_USER: ${KC_DB_USER}
      POSTGRES_PASSWORD: ${KC_DB_PASSWORD}
    volumes:
      - kc_postgres_data:/var/lib/postgresql/data
    networks:
      - keycloak_internal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KC_DB_USER} -d ${KC_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.1
    container_name: keycloak
    command: start-dev --import-realm
    env_file: .env
    environment:
      KC_DB: ${KC_DB_VENDOR}
      KC_DB_URL: jdbc:postgresql://${KC_DB_HOST}:5432/${KC_DB_NAME}
      KC_DB_USERNAME: ${KC_DB_USER}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_METRICS_ENABLED: ${KC_METRICS_ENABLED}
    volumes:
      - ./keycloak:/opt/keycloak/data/import
      - keycloak_data:/opt/keycloak/data
    ports:
      - "8080:8080"
    depends_on:
      keycloak_db:
        condition: service_healthy
    networks:
      - keycloak_internal_network
      - shared_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 15s
      retries: 3
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.133.0
    container_name: otel-collector
    command: ["--config=/etc/otel.yml"]
    volumes:
      - ./observability/otel/otel.yml:/etc/otel.yml:ro
    ports:
      - "4317:4317"        # OTLP gRPC (traces/metrics/logs)
      - "4318:4318"        # OTLP HTTP
      - "9464:9464"        # /metrics do exporter Prometheus (Collector)
    networks:
      - observability_network
      - shared_network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - observability_network
      - shared_network
    restart: unless-stopped
    depends_on:
      - otel-collector
      - keycloak

  loki:
    image: grafana/loki:3.5.3
    container_name: loki
    command: ["-config.file=/etc/loki/loki.yml"]
    volumes:
      - ./observability/loki/loki.yml:/etc/loki/loki.yml:ro
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - observability_network
      - shared_network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:3.5.3
    container_name: promtail
    command: ["-config.file=/etc/promtail/promtail.yml"]
    volumes:
      - ./observability/promtail/promtail.yml:/etc/promtail/promtail.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - observability_network
    depends_on:
      - loki
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.72.0
    container_name: jaeger
    env_file: .env
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ${COLLECTOR_ZIPKIN_HOST_PORT}
      COLLECTOR_OTLP_ENABLED: ${COLLECTOR_OTLP_ENABLED}
    ports:
      - "16686:16686"  # UI
      - "14250:14250"  # gRPC collector
      - "14268:14268"  # HTTP collector
      - "9411:9411"    # Zipkin
    networks:
      - observability_network
      - shared_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:12.1.0
    container_name: grafana
    env_file: .env
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3001:3000"  # <--- Sem conflito com sua API Hermes (3000)
    networks:
      - observability_network
      - shared_network
    depends_on:
      - prometheus
      - loki
      - jaeger
    restart: unless-stopped

volumes:
  kc_postgres_data:
  keycloak_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  keycloak_internal_network:
    name: keycloak_internal_network
    driver: bridge
  shared_network:
    name: shared_network
    driver: bridge
    external: true
  observability_network:
    name: observability_network
    driver: bridge
